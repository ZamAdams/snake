import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

public class MainFrame extends JFrame {

    // Field
	
    static final int DEFAULT_FIELD_SIZE = 20;
    static final Color DEFAULT_FIELD_COLOR = Color.DARK_GRAY;	
    
    int fieldCellCount;
    Color fieldColor = Color.WHITE;
    
    // Snake
    
	static final int DEFAULT_SNAKE_LENGTH = 2;
    static final Color DEFAULT_SNAKE_COLOR = Color.GREEN;
    
    int snakeLength;
    Color snakeColor;
    int[][] snake;
    int snakeDX,snakeDY;

    // Apple
    
    static final Color DEFAULT_APPLE_COLOR = Color.RED;
    
    int score;
    int appleX,appleY;
    Color appleColor;
   
    // Game parameters
    
    boolean isPlaying = true;
    boolean isCollidesWithWalls = false;
    
    String textOnLabel = "Watch out";
    
    String title = "Snake Game";
    Color background = Color.BLUE;
    int delay = 150;
    
    
    void start() {
    	createField();
    	createSnake();
        createApple();
    }

    void update() {
        if (!isPlaying) return;
        moveSnake();
        checkSnakeCollisionWithWalls();
        checkSnakeCollisionWithItself();
        checkSnakeCollisionWithApple();
    }

    void draw(Graphics2D g2) {
        drawField(g2);
        drawSnake(g2);
        drawApple(g2);
        
    }

    void input(int keyCode) {
        if (keyCode == KeyEvent.VK_ESCAPE) {
            System.exit(0);
        } 

        if (!isPlaying) return;

        switch (keyCode) {
            case KeyEvent.VK_UP:
                turnSnakeUp();
                break;
            case KeyEvent.VK_DOWN:
                turnSnakeDown();
                break;
            case KeyEvent.VK_LEFT:
                turnSnakeLeft();
                break;
            case KeyEvent.VK_RIGHT:
                turnSnakeRight();
                break;
        }
    }

    // field
    
    void createField() {
    	fieldCellCount = DEFAULT_FIELD_SIZE;
    }
    
    void drawField(Graphics2D g2) {
        int fieldSize = Math.min(getWidth(), getHeight());
        int cellSize = fieldSize / fieldCellCount;

        //int centerShiftX = (getWidth() - fieldSize) / 2;
        //int centerShiftY = (getHeight() - fieldSize) / 2;

        g2.setPaint(fieldColor);
        for (int y = 0; y < fieldCellCount; ++y) {
            for (int x = 0; x < fieldCellCount; ++x) {
                g2.fillRect(
                    /*centerShiftX + */x * cellSize+5,
                    /*centerShiftY + */y * cellSize+5,
                    cellSize - 1,
                    cellSize - 1
                );
            }
        }

    }

    // Snake
    
    void createSnake(){
    	snakeLength = DEFAULT_SNAKE_LENGTH;
        snakeColor = DEFAULT_SNAKE_COLOR;
        snake = new int[snakeLength][2];
        
        snakeDX = 1;
        snakeDY = 0;
    }
       
    void drawSnake(Graphics2D g2) {
        int fieldSize = Math.min(getWidth(), getHeight());
        int cellSize = fieldSize / fieldCellCount;

        // int centerShiftX = (getWidth() - fieldSize) / 2;
        // int centerShiftY = (getHeight() - fieldSize) / 2;

        g2.setPaint(snakeColor);
        for (int i = 0; i < snakeLength; ++i) {
            int x = snake[i][0];
            int y = snake[i][1];

            if (isInsideField(x, y)) {
                g2.fillRect(
                    /*centerShiftX + */x * cellSize+5,
                    /*centerShiftY + */y * cellSize+5,
                    cellSize - 1,
                    cellSize - 1
                );
            }
        }
    }

    void moveSnake() {
        int head = snakeLength - 1;
        for (int i = 0; i < head; ++i) {
            snake[i][0] = snake[i + 1][0];
            snake[i][1] = snake[i + 1][1];
        }
        snake[head][0] += snakeDX;
        snake[head][1] += snakeDY;
    }

    
    // Apple
    
    void createApple() {
    	 boolean isFound = false;
		 do {
    		appleX = random(0, fieldCellCount);
		    appleY = random(0, fieldCellCount);
		    int i;	
		    for (i=0; i<snakeLength; i++) {
		    	int snakeCellsX = snake[i][0];
		        int snakeCellsY = snake[i][1];
		            
		        if (appleX==snakeCellsX && appleY==snakeCellsY) {
		            break;
		            }
		    		
		    	}
		    	if (i==snakeLength) {
		    		isFound=true;
		    	}
		 } while (!isFound);
    	appleColor = DEFAULT_APPLE_COLOR;
    }
    
    void drawApple(Graphics2D g2) {
        int fieldSize = Math.min(getWidth(), getHeight());
        int cellSize = fieldSize / fieldCellCount;

        // int centerShiftX = (getWidth() - fieldSize) / 2;
        // int centerShiftY = (getHeight() - fieldSize) / 2;

        g2.setPaint(appleColor);
        
                g2.fillRect(
                    /*centerShiftX + */appleX * cellSize+5,
                    /*centerShiftY + */appleY * cellSize+5,
                    cellSize - 1,
                    cellSize - 1
                );
                
                if (!isPlaying) {
                	g2.setColor(Color.RED);
                    Font font = new Font("Arial", Font.PLAIN, 50);
                    g2.setFont(font);
                    g2.drawString("Вы проиграли!", 10, 200);
                    g2.drawString("Вы съели " + score + " яблок", 10, 300); 
                    
                }
            
    }
    
    // Collisions

    void checkSnakeCollisionWithWalls() {
        int head = snakeLength - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];

       if (isCollidesWithWalls) {
	        if (!isInsideField(headX, headY)) {
	            isPlaying = false;
	            
	        	}
       		} 
       	passingWalls();
   	}
    
    void passingWalls() {
        int head = snakeLength - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];
    	 if (headX==fieldCellCount) {
	        	snake[head][0]=0;
	        } else if (headY==fieldCellCount) {
	        	snake[head][1] =0;
	        } else if (headX<0) {
	        	snake[head][0]=fieldCellCount;
	        } else if (headY<0) {
	        	snake[head][1]=fieldCellCount;
	        }
    	
    }
     
    void checkSnakeCollisionWithApple() {
        int head = snakeLength - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];

        if (appleX==headX && appleY==headY) {
        	growSnake();
        	score++;
        	delay-=20;
            createApple();
            
        }
    }
    
    void growSnake() {
    	int[][] temp = new int[snakeLength+1][2];
    	int i;
    	for (i=0; i<snakeLength; i++) {
    		temp[i][0] = snake[i][0];
    		temp[i][1] = snake[i][1];
    	}
    	temp[i][0] = temp [i-1][0];
    	temp[i][1] = temp [i-1][1]; 
    	
    	++snakeLength;
    	
    	snake = temp;
    	
    }
    
    void checkSnakeCollisionWithItself() {
        int head = snakeLength - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];
        for (int i=0; i<head; i++) {
            int snakeCellsX = snake[i][0];
            int snakeCellsY = snake[i][1];
	        if (headX==snakeCellsX && headY==snakeCellsY) {
	        	 isPlaying = false;
	        	 textOnLabel = "Game Over";
	        	 break;
	        }
        }
    }
    
    // Utilities
    
    boolean isInsideField(int x, int y) {
        return (x >= 0 && x < fieldCellCount) &&
               (y >= 0 && y < fieldCellCount);
    }

    void turnSnakeUp() {
        if (snakeDY != 1) {
            snakeDX = 0;
            snakeDY = -1;
        }
    }

    void turnSnakeDown() {
        if (snakeDY != -1) {
            snakeDX = 0;
            snakeDY = 1;
        }
    }
    
    void turnSnakeLeft() {
        if (snakeDX != 1) {
            snakeDX = -1;
            snakeDY = 0;
        }
    }

    void turnSnakeRight() {
        if (snakeDX != -1) {
            snakeDX = 1;
            snakeDY = 0;
        }
    }
     
    static int random(int max, int min) {
    	return (int) (min+ Math.random()*(max-min));
    }
    
    // GUI

    public MainFrame() {
    	
        setTitle(title);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        DrawPanel panel = new DrawPanel();

         panel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                input(e.getKeyCode());
            }
        });
         
        // Control Panel
         
        add(panel);
        panel.setLayout(new BorderLayout());
       
        JPanel panel2 = new JPanel();
        panel.add(panel2, BorderLayout.SOUTH);
        panel2.setBackground(null);
        
        // Button Start
        
        JButton start = new JButton("START");
        panel2.add(start, BorderLayout.NORTH);
        
        start.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				new MainFrame();
			}
		});
        
        //RadioButton Walls
        
        JRadioButton b1 = new JRadioButton("SET WALLS");
        panel2.add(b1, BorderLayout.EAST);
       
        b1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				isCollidesWithWalls =true;
				
			}
		});
        
        
        // Timer
         
        javax.swing.Timer timer = new javax.swing.Timer(delay, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                update();
                repaint();
            }
        });
    

        setUndecorated(true);
        setSize(650, 680);
        setLocation(350, 20);
        setVisible(true);
  
        start();
        timer.start();
       
    }

    public static void main(String[] args) {
    	new MainFrame();
    }
    
 
    class DrawPanel extends JPanel {
        public DrawPanel() {
            setBackground(background);
            setFocusable(true);
            requestFocusInWindow();
            setDoubleBuffered(true);
            
        }

        public void paintComponent(Graphics g) {
        	Graphics2D g2 = (Graphics2D) g;
            RenderingHints hints = new RenderingHints(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON
            );
            g2.setRenderingHints(hints);
            super.paintComponent(g2);
            draw(g2);
        }
    }

}
